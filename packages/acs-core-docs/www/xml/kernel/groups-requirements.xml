<sect1 id="groups-requirements" xreflabel="ACS 4 Groups Requirements">
<title>ACS 4 Groups Requirements</title>

<authorblurb><para>
by <ulink url="http://planitia.org">Rafael H. Schloming</ulink>, <ulink url="mailto:mthomas@arsdigita.com">Mark Thomas</ulink> 
</para></authorblurb>


<sect2 id="groups-requirements-intro">
<title>Introduction</title>


<para>Almost all database-backed websites have users, and need to model the
grouping of users. The ACS 4 Parties and Groups system is intended to provide
the flexibility needed to model complex real-world organizational structures,
particularly to support powerful subsite services; that is, where one ACS
installation can support what appears to the user as distinct web services
for different user communities.</para>

</sect2>

<sect2 id="groups-requirements-vision">
<title>Vision Statement</title>


<para>A powerful web service that can meet the needs of large enterprises must
be able to model the the real world&#39;s very rich organizational structures
and many ways of decomposing the same organization. For example, a
corporation can be broken into structures (the corporation, its divisions,
and their departments) or regions (the Boston office, the LA office); a
person who is employed by (is a member of) a specific department is also a
member of the division and the corporation, and works at (is a member of, but
in a different sense) a particular office. ACS 4&#39;s Parties and Groups
system will support such complex relations faithfully.</para>

<para><phrase>Historical Motivations</phrase></para>

<para>The primary limitation of the ACS 3.x user group system is that it
restricts the application developer to representing a &quot;flat group&quot;
that contains only users: The <computeroutput>user_groups</computeroutput> table may contain the
<computeroutput>group_id</computeroutput> of a parent group, but parent-child relationship
support is limited because it only allows one kind of relationship between
groups to be represented. Moreover, the Oracle database&#39;s limited support
for tree-like structures makes the queries over these relationships
expensive.</para>

<para>In addition, the Module Scoping design in ACS 3.0 introduced a
<emphasis>party</emphasis> abstraction - a thing that is a person or a group of people -
though not in the form of an explicit table. Rather, the triple of
<computeroutput>scope</computeroutput>, <computeroutput>user_id</computeroutput>, and <computeroutput>group_id</computeroutput> columns
was used to identify the party. One disadvantage of this design convention is
that it increases a data model&#39;s complexity by requiring the programmer
to:</para>

<itemizedlist>
<listitem><para>add these three columns to each &quot;scoped&quot; table</para></listitem>

<listitem><para>define a multi-column check constraint to protect against data corruption
(e.g., a row with a <computeroutput>scope</computeroutput> value of &quot;group&quot; but a null
<computeroutput>group_id</computeroutput>)</para></listitem>

<listitem><para>perform extra checks in <computeroutput>Tcl</computeroutput> and <computeroutput>PL/SQL</computeroutput>
functions and procedures to check both the <computeroutput>user_id</computeroutput> and
<computeroutput>group_id</computeroutput> values</para></listitem>
</itemizedlist>

<para>In sum, the goal of the <phrase>Parties and Groups</phrase> system is to
provide ACS programmers and site administrators with simple tools that fully
describe the complex relationships that exist among groups in the real
world.</para>

</sect2>

<sect2 id="groups-requirements-user-scenarios">
<title>User Scenarios</title>


<para>Pat Developer has a client project and wants to model the company, its
offices, its divisions, and its departments as groups and the employees as
users.</para>

</sect2>

<sect2 id="groups-requirements-system-overview">
<title>System Overview</title>


<para>We start with <phrase>Groups</phrase>, which contain members; the
<phrase>member can be either a person or another group</phrase> (i.e. a
member is a party).</para>

<para>In addition to membership, the party and groups system defines a
<phrase>composition</phrase> relationship that may exist between groups: A
group can be a <phrase>component</phrase> of another group. The child group
is called a <emphasis>component group</emphasis>; the parent group is called a
<emphasis>composite group</emphasis>.</para>

<para>A group <phrase>G<subscript>c</subscript></phrase> can be a member and/or a component
of another group <phrase>G<subscript>p</subscript></phrase>; the difference is in the way
the members of <phrase>G<subscript>c</subscript></phrase> are related to
<phrase>G<subscript>p</subscript></phrase>:</para>

<itemizedlist>
<listitem><para>If a party <phrase>P</phrase> is a member (or a component) of
<phrase>G<subscript>c</subscript></phrase> and if <phrase>G<subscript>c</subscript></phrase> is a
component of <phrase>G<subscript>p</subscript></phrase>, then <phrase>P</phrase> is also
a member (or a component) of <phrase>G<subscript>p</subscript></phrase></para></listitem>

<listitem><para>If a party <phrase>P</phrase> is a member (or a component) of
<phrase>G<subscript>c</subscript></phrase> and if <phrase>G<subscript>c</subscript></phrase> is a
member of <phrase>G<subscript>p</subscript></phrase>, then <phrase>no
relationship</phrase> between <phrase>P</phrase> and
<phrase>G<subscript>p</subscript></phrase> exists as a result of the relationship between
<phrase>G<subscript>p</subscript></phrase> and <phrase>G<subscript>p</subscript></phrase>.</para></listitem>
</itemizedlist>

<para>Consider an example to make this less abstract: Pretend that the Sierra
Club is a <emphasis>member</emphasis> of Greenpeace. The Sierra Club has chapters; each
chapter is a <emphasis>component</emphasis> of the Sierra Club. If Eddie Environmentalist
is a member of the Massachusetts Chapter of the Sierra Club, Eddie is
automatically a member of the Sierra Club, but being a Sierra Club member
does not make Eddie a member of Greenpeace.</para>

<para>In the ACS, Greenpeace, Sierra Club, and the Sierra Club chapters would be
modeled as groups, and Eddie would be a user. There would be a composition
relationship between each Sierra Club chapter and the Sierra Club. Membership
relationships would exist between Eddie and the Massachusetts Chapter,
between Eddie and the Sierra Club (due to Eddie&#39;s membership in the
Massachusetts chapter), and between the Sierra Club and Greenpeace.</para>

<para>Membership requirements can vary from group to group. The parties and
groups system must provide a base type that specifies the bare minimum
necessary to join a group.</para>

<para>The parties and groups system must support constraints between a composite
group <phrase>G<subscript>P</subscript></phrase> and any of its component groups,
<phrase>G<subscript>C</subscript></phrase>. For example, the system should be able to
enforce a rule like: Do not allow a party <phrase>P</phrase> to become a
member of <phrase>G<subscript>C</subscript></phrase> unless <phrase>P</phrase> is already
a member of <phrase>G<subscript>P</subscript></phrase>.</para>

</sect2>

<sect2 id="groups-requirements-links">
<title>Related Links</title>


<itemizedlist>
<listitem><para><xref linkend="groups-design"/></para></listitem>
</itemizedlist>

</sect2>

<sect2 id="groups-requirements-data-model">
<title>Requirements: Data Model</title>


<para>The data model for the parties and groups system must provide support for
the following types of entities:</para>

<variablelist>
<varlistentry>
<term><phrase>10.0 Parties</phrase>

</term>
 
<listitem>
<para>A <phrase>party</phrase> is an entity used to represent either a
<emphasis>group</emphasis> or a <emphasis>person</emphasis>.</para>

<para>The data model should enforce these constraints:</para>

<para><phrase>10.10</phrase> A party has an email address, which can be
empty.</para>

<para><phrase>10.20</phrase> A party may have multiple email addresses
associated with it.</para>

<para><phrase>10.30</phrase> The email address of a party must be unique within
an ACS system.</para>
</listitem>
</varlistentry>

<varlistentry>
<term><phrase>20.0 Groups</phrase>

</term>
 
<listitem>
<para>A <phrase>group</phrase> is a collection of zero or more parties.</para>

<para><phrase>20.10</phrase> The data model should support the subclassing of
groups via ACS Objects.</para>
</listitem>
</varlistentry>

<varlistentry>
<term><phrase>30.0 Persons</phrase>

</term>
 
<listitem>
<para>A <phrase>person</phrase> represents an actual human being, past or
present.</para>

<para><anchor id="groups-requirements-30-10"/><phrase>30.10.</phrase> A person must have
an associated name.</para>
</listitem>
</varlistentry>

<varlistentry>
<term><phrase>40.0 Users</phrase>

</term>
 
<listitem>
<para>A <phrase>user</phrase> is a person who has registered with an ACS site. A
user may have additional attributes, such as a screen name.</para>

<para>The data model should enforce these constraints:</para>

<para><phrase>40.10</phrase> A user must have a non-empty email address.</para>

<para><phrase>40.20</phrase> Two different users may not have the same email
address on a single ACS installation; i.e., an email address identifies a
single user on the system.</para>

<para><phrase>40.30</phrase> A user may have multiple email addresses; for
example, two or more email addresses may identify a single user.</para>

<para><phrase>40.40</phrase> A user must have password field which can be
empty.</para>
</listitem>
</varlistentry>
</variablelist>

<para>The data model for the parties and groups system must provide support for
the following types of relationships between entities:</para>

<variablelist>
<varlistentry>
<term><phrase>50.0 Membership</phrase>

</term>
 
<listitem><para>
A party <phrase>P</phrase> is considered a <phrase>member</phrase> of a
group <phrase>G</phrase></para>

<itemizedlist>
<listitem><para>when a direct membership relationship exists between <phrase>P</phrase>
and <phrase>G</phrase></para></listitem>

<listitem><para>or when there exists a direct membership relationship between
<phrase>P</phrase> and some group <phrase>G<subscript>C</subscript></phrase> and
<phrase>G<subscript>C</subscript></phrase> has a composition relationship (c.f., <link linkend="groups-requirements-60-0">60.0</link>) with <phrase>G</phrase>.</para></listitem>
</itemizedlist>
 

<para><phrase>50.10</phrase> A party may be a member of multiple groups.</para>

<para><phrase>50.20</phrase> A party may be a member of the same group multiple
times only when all the memberships have different types; for example, Jane
may be a member of The Company by being both an Employee and an
Executive.</para>

<para><phrase>50.30</phrase> A party as a member of itself is not supported.</para>

<para><phrase>50.40</phrase> The data model must support membership
constraints.</para>

<para><phrase>50.50</phrase>The data model should support the subclassing of
membership via ACS Relationships.</para>
</listitem>
</varlistentry>
</variablelist>

<variablelist>
<varlistentry>
<term>
<anchor id="groups-requirements-60-0"/>
<phrase>60.0 Composition</phrase>
</term>
 
<listitem>
<para>A group <phrase>G<subscript>C</subscript></phrase> is considered a
<phrase>component</phrase> of a second group
<phrase>G<subscript>P</subscript></phrase></para>

<itemizedlist>
<listitem><para>when a direct composition relationship exists between
<phrase>G<subscript>C</subscript></phrase> and <phrase>G<subscript>P</subscript></phrase></para></listitem>

<listitem><para>or when there exists a direct composition relationship between
<phrase>G<subscript>C</subscript></phrase> and some group <phrase>G<subscript>i</subscript></phrase>
and <phrase>G<subscript>i</subscript></phrase> has a composition relationship with
<phrase>G<subscript>P</subscript></phrase>.</para></listitem>
</itemizedlist>

 

<para><phrase>60.10</phrase>A group may be a component of multiple groups.</para>

<para><phrase>60.20</phrase>A group as a component of itself is not
supported.</para>

<para><phrase>60.30</phrase>The data model must support component
constraints.</para>

<para><phrase>60.40</phrase>The data model should support the subclassing of
composition via ACS Relationships.</para>
</listitem>
</varlistentry>
</variablelist>

</sect2>

<sect2 id="groups-requirements-api">
<title>Requirements: API</title>


<para>The API should let programmers accomplish the following tasks:</para>

<variablelist>
<varlistentry>
<term><phrase>70.10 Create a group</phrase>

</term>
 
<listitem>
<para>The parties and groups system provides a well defined API call that
creates a new group by running the appropriate transactions on the parties
and groups system data model. This API is subject to the constraints laid out
in the data model.</para>
</listitem>
</varlistentry>

<varlistentry>
<term><phrase>70.20 Create a person</phrase>

</term>
 
<listitem>
<para>The parties and groups system provides a well defined API call that
creates a new person by running the appropriate transactions on the parties
and groups system data model. This API is subject to the constraints laid out
in the data model.</para>
</listitem>
</varlistentry>

<varlistentry>
<term><phrase>70.30 Create a user</phrase>

</term>
 
<listitem>
<para>The parties and groups system provides a well defined API call that
creates a new user by running the appropriate transactions on the parties and
groups system data model. This API is subject to the constraints laid out in
the data model.</para>
</listitem>
</varlistentry>

<varlistentry>
<term><phrase>80.10 Refine a person to a user</phrase>

</term>
 
<listitem>
<para>The parties and groups system provides a well defined API call that
creates a new user by running the appropriate transactions on an existing
person entity. This API is subject to the constraints laid out in the data
model.</para>
</listitem>
</varlistentry>

<varlistentry>
<term><phrase>80.30 Demote a user to a person</phrase>

</term>
 
<listitem>
<para>The parties and groups system provides a well defined API call that
demotes an existing user entity to a person entity by running the appropriate
transactions on the existing user. This API is subject to the constraints
laid out in the data model.</para>
</listitem>
</varlistentry>

<varlistentry>
<term><phrase>90.10 Update a party</phrase>

</term>
 
<listitem>
<para>The programmer should be able to modify, add, and delete attributes on any
party. This API is subject to the constraints laid out in the data model.</para>
</listitem>
</varlistentry>

<varlistentry>
<term><phrase>95.10 Get the attributes of a party</phrase>

</term>
 
<listitem>
<para>The programmer should be able to view the attributes on any party. This
API is subject to the constraints laid out in the data model.</para>
</listitem>
</varlistentry>

<varlistentry>
<term><phrase>100.10 Delete a party</phrase>


</term>
 
<listitem>
<para>The system provides an API for deleting a party. This API is subject to
the constraints laid out in the data model.</para>

<para><phrase>100.30</phrase> The system may provide a single API call to remove
the party from all groups and then delete the party.</para>

<para><phrase>100.40</phrase> In the case of a group, the system may provide a
single API call to remove all parties from a group and then delete the
group.</para>
</listitem>
</varlistentry>

<varlistentry>
<term><phrase>110.0 Add a party as a member of a group</phrase>

</term>
 
<listitem>
<para>The parties and groups system provides an API for adding a party as a
member of a group. This API is subject to the constraints laid out in the
data model.</para>
</listitem>
</varlistentry>

<varlistentry>
<term><phrase>115.0 Add a group as a component of a second group</phrase>

</term>
 
<listitem>
<para>The parties and groups system provides an API for adding a group as a
component of a second group. This API is subject to the constraints laid out
in the data model.</para>
</listitem>
</varlistentry>

<varlistentry>
<term><phrase>120.0 Remove a party as a member of a group</phrase>

</term>
 
<listitem>
<para>The parties and groups system provides an API for deleting a party&#39;s
membership in a group. This API is subject to the constraints laid out in the
data model.</para>
</listitem>
</varlistentry>

<varlistentry>
<term><phrase>125.0 Remove a group as a component of a second
group</phrase>

</term>
 
<listitem>
<para>The parties and groups system provides an API for deleting a group&#39;s
composition in a second group. This API is subject to the constraints laid
out in the data model.</para>
</listitem>
</varlistentry>

<varlistentry>
<term><phrase>130.0 Membership check</phrase>


</term>
 
<listitem>
<para>The parties and groups system provides an API for answering the question:
&quot;Is party <phrase>P</phrase> a member of group
<phrase>G</phrase>?&quot;</para>
</listitem>
</varlistentry>

<varlistentry>
<term><phrase>135.0 Composition check</phrase>


</term>
 
<listitem>
<para>The parties and groups system provides an API for answering the question:
&quot;Is group <phrase>G<subscript>C</subscript></phrase> a component of group
<phrase>G<subscript>P</subscript></phrase>?&quot;</para>
</listitem>
</varlistentry>

<varlistentry>
<term><phrase>140.0 Get members query</phrase>


</term>
 
<listitem>
<para>The parties and groups system provides an API for answering the question:
&quot;Which parties are members of group <phrase>G</phrase>?&quot;</para>
</listitem>
</varlistentry>

<varlistentry>
<term><phrase>145.0 Get components query</phrase>


</term>
 
<listitem>
<para>The parties and groups system provides an API for answering the question:
&quot;Which groups are components of group <phrase>G</phrase>?&quot;</para>
</listitem>
</varlistentry>

<varlistentry>
<term><phrase>150.0 Member-of-groups query</phrase>


</term>
 
<listitem>
<para>The parties and groups system provides an API for answering the question:
&quot;Of which groups is party <phrase>P</phrase> a member?&quot;</para>
</listitem>
</varlistentry>

<varlistentry>
<term><phrase>155.0 Component-of-groups query</phrase>


</term>
 
<listitem>
<para>The parties and groups system provides an API for answering the question:
&quot;Of which groups is group <phrase>G</phrase> a component?&quot;</para>
</listitem>
</varlistentry>

<varlistentry>
<term><phrase>160.0 Allowed membership check</phrase>


</term>
 
<listitem>
<para>The parties and groups system provides an API for answering the question:
&quot;Is party <phrase>P</phrase> allowed to become a member of group
<phrase>G</phrase>?&quot;</para>
</listitem>
</varlistentry>

<varlistentry>
<term><phrase>165.0 Allowed composition check</phrase>


</term>
 
<listitem>
<para>The parties and groups system provides an API for answering the question:
&quot;Is group <phrase>G<subscript>C</subscript></phrase> allowed to become a component
of group <phrase>G<subscript>P</subscript></phrase>?&quot;</para>
</listitem>
</varlistentry>

<varlistentry>
<term><phrase>170.0 Efficiency</phrase>


</term>
 
<listitem>
<para>Since many pages at a site may check membership in a group before serving
a page (e.g., as part of a general permissions check), the data model must
support the efficient storage and retrieval of party attributes and
membership.</para>
</listitem>
</varlistentry>

<varlistentry>
<term><phrase>180.0 Ease of Use</phrase>


</term>
 
<listitem>
<para>Since many SQL queries will check membership in a group as part of the
<computeroutput>where</computeroutput> clause, whatever mechanism is used to check membership in SQL
should be fairly small and simple.</para>
</listitem>
</varlistentry>
</variablelist>

</sect2>

<sect2 id="groups-requirements-ui">
<title>Requirements: User Interface</title>


<para>The user interface is a set of HTML pages that are used to drive the
underlying API. The user interface may provide the following functions:</para>

<itemizedlist>
<listitem><para><phrase>200.0</phrase> Create a party</para></listitem>

<listitem><para><phrase>210.0</phrase> View the attributes of a party</para></listitem>

<listitem><para><phrase>220.0</phrase> Update the attributes of a party</para></listitem>

<listitem><para><phrase>240.0</phrase> Delete a party</para></listitem>

<listitem><para><phrase>250.0</phrase> Add a party to a group</para></listitem>

<listitem><para><phrase>260.0</phrase> Remove a party from a group</para></listitem>

<listitem><para><phrase>270.0</phrase> Perform the membership and composition checks
outlined in 130.x to 165.x</para></listitem>
</itemizedlist>

</sect2>

<sect2 id="groups-requirements-rev-history">
<title>Revision History</title>


 
<informaltable>
<tgroup cols="4">
<tbody>
<row>
<entry><phrase>Document Revision #</phrase></entry>
<entry><phrase>Action Taken, Notes</phrase></entry>
<entry><phrase>When?</phrase></entry>
<entry><phrase>By Whom?</phrase></entry>
</row>

<row>
<entry>0.1</entry>
<entry>Creation</entry>
<entry>08/16/2000</entry>
<entry>Rafael Schloming</entry>
</row>

<row>
<entry>0.2</entry>
<entry>Initial revision</entry>
<entry>08/19/2000</entry>
<entry>Mark Thomas</entry>
</row>

<row>
<entry>0.3</entry>
<entry>Edited and reviewed, conforms to requirements template</entry>
<entry>08/23/2000</entry>
<entry>Kai Wu</entry>
</row>

<row>
<entry>0.4</entry>
<entry>Further revised, added UI requirements</entry>
<entry>08/24/2000</entry>
<entry>Mark Thomas</entry>
</row>

<row>
<entry>0.5</entry>
<entry>Final edits, pending freeze</entry>
<entry>08/24/2000</entry>
<entry>Kai Wu</entry>
</row>

<row>
<entry>0.6</entry>
<entry>More revisions, added composition requirements</entry>
<entry>08/30/2000</entry>
<entry>Mark Thomas</entry>
</row>

<row>
<entry>0.7</entry>
<entry>More revisions, added composition requirements</entry>
<entry>09/08/2000</entry>
<entry>Mark Thomas</entry>
</row>
</tbody></tgroup></informaltable>

</sect2>

</sect1>

